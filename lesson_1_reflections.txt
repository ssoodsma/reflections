How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The diff eliminates most of the matching lines so that you can focus on the changed content.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I could go back to any point in the history to restore the file to a previous condition - such as before a bug was introduced, or
		before a feature was added, or accidental delete of file.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    If you forget to commit regularly, the advantages of history will be lost.  But, automatic saving could produce
		versions that are not coherent.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In software development, a single change may involve multiple files.  But, Google docs treats files as separately maintained documents.

How can you use the commands git log and git diff to view the history of files?

    The git log output can be searched for a particular change message.  The diff command can then be used to compare the changed version 
		any other version in the history.  For example, it can be compared to the immediate prior version to see what additions and deletions
		have been made since the previous version.

How might using version control make you more confident to make changes that
could break something?

    You can always go back to the version of code in the previous commit that was not broken.

Now that you have your workspace set up, what do you want to try using Git for?

    I would like to try using git to manage version control for the project 1 source code.
